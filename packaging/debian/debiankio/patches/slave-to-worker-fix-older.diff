commit 486a49f51cf28e98af3dbb7ffe6e2456cf485971
Author: Jean-Francois Dockes <jf@dockes.org>
Date:   Fri Apr 19 14:28:41 2024 +0200

    kio: fix ifdefs for slave->worker transition

diff --git a/kde/kioslave/kio_recoll/dirif.cpp b/kde/kioslave/kio_recoll/dirif.cpp
index 1c3f87a1..c4176fcd 100644
--- a/kde/kioslave/kio_recoll/dirif.cpp
+++ b/kde/kioslave/kio_recoll/dirif.cpp
@@ -205,7 +205,7 @@ static void createGoHelpEntry(KIO::UDSEntry& entry)
 }
 
 // As far as I can see we only ever get this on '/' so why all the code?
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
 void
 #else
 KIO::WorkerResult
@@ -239,7 +239,7 @@ RecollProtocol::stat(const QUrl& url)
             break;
         default:
             qDebug() << "RecollProtocol::stat: ??";
-#if KIO_VERSION < 6            
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
             error(ERR_DOES_NOT_EXIST, QString());
 #endif
             break;
@@ -251,7 +251,7 @@ RecollProtocol::stat(const QUrl& url)
             if (num >= 0 && m_source && m_source->getDoc(num, doc)) {
                 entry = resultToUDSEntry(doc, num);
             } else {
-#if KIO_VERSION < 6            
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
                 error(ERR_DOES_NOT_EXIST, QString());
 #endif
             }
@@ -284,14 +284,14 @@ RecollProtocol::stat(const QUrl& url)
         qDebug() << "RecollProtocol::stat: none of the above ??";
     }
     statEntry(entry);
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
     finished();
 #else
     return KIO::WorkerResult::pass();
 #endif
 }
 
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
 void
 #else
 KIO::WorkerResult
@@ -318,7 +318,7 @@ RecollProtocol::listDir(const QUrl& url)
             }
             createGoHelpEntry(entry);
             entries.append(entry);
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
             listEntries(entries);
             finished();
             return;
@@ -327,7 +327,7 @@ RecollProtocol::listDir(const QUrl& url)
 #endif
         }
         default:
-#if KIO_VERSION < 6            
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
             error(ERR_CANNOT_ENTER_DIRECTORY, QString());
             return;
 #else
@@ -340,16 +340,16 @@ RecollProtocol::listDir(const QUrl& url)
         // which offers an opportunity to not perform it.
         if (ingest.endSlashQuery()) {
             qDebug() << "RecollProtocol::listDir: Ends With /";
-#if KIO_VERSION < 6            
-            error(ERR_SLAVE_DEFINED, "Autocompletion search aborted");
-            return;
-#else
+#if KIO_VERSION >= KIO_WORKER_SWITCH_VERSION
             return KIO::WorkerResult::fail();
+#else
+            error(ERR_SLAVE_DEFINED, QString::fromUtf8("Autocompletion search aborted"));
+            return;
 #endif
         }
         if (!syncSearch(qd)) {
             // syncSearch did the error thing
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
             return;
 #else
             return KIO::WorkerResult::fail();
@@ -358,7 +358,7 @@ RecollProtocol::listDir(const QUrl& url)
         // Fallthrough to actually listing the directory
     } else {
         qDebug() << "RecollProtocol::listDir: Cant grok input url";
-#if KIO_VERSION < 6            
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
         error(ERR_CANNOT_ENTER_DIRECTORY, QString());
         return;
 #else
@@ -382,8 +382,8 @@ RecollProtocol::listDir(const QUrl& url)
         int pagelen = m_source->getSeqSlice(pagebase, pagesize, page);
         UDSEntry entry;
         if (pagelen < 0) {
-#if KIO_VERSION < 6            
-            error(ERR_SLAVE_DEFINED, "Internal error");
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
+            error(ERR_SLAVE_DEFINED, QString::fromUtf8("Internal error"));
 #endif
             break;
         }
@@ -397,7 +397,7 @@ RecollProtocol::listDir(const QUrl& url)
         }
         pagebase += pagelen;
     }
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
     finished();
 #else
     return KIO::WorkerResult::pass();
diff --git a/kde/kioslave/kio_recoll/htmlif.cpp b/kde/kioslave/kio_recoll/htmlif.cpp
index 75a7d538..747392f9 100644
--- a/kde/kioslave/kio_recoll/htmlif.cpp
+++ b/kde/kioslave/kio_recoll/htmlif.cpp
@@ -239,9 +239,8 @@ void RecollProtocol::showPreview(const Rcl::Doc& idoc)
     Rcl::Doc fdoc;
     string ipath = idoc.ipath;
     if (!interner.internfile(fdoc, ipath)) {
-#if KIO_VERSION < 6
-        error(KIO::ERR_SLAVE_DEFINED,
-              "Cannot convert file to internal format");
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
+        error(ERR_SLAVE_DEFINED, QString::fromUtf8("Cannot convert file to internal format"));
 #endif
         return;
     }
diff --git a/kde/kioslave/kio_recoll/kio_recoll.cpp b/kde/kioslave/kio_recoll/kio_recoll.cpp
index a9b87460..e30958e6 100644
--- a/kde/kioslave/kio_recoll/kio_recoll.cpp
+++ b/kde/kioslave/kio_recoll/kio_recoll.cpp
@@ -51,7 +51,7 @@ static inline QString u8s2qs(const std::string& us)
 class KIOPluginForMetaData : public QObject
 {
     Q_OBJECT
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
     Q_PLUGIN_METADATA(IID "org.recoll.kio.slave.recoll" FILE "recoll.json")
 #else
     Q_PLUGIN_METADATA(IID "org.recoll.kio.worker.recoll" FILE "recoll.json")
@@ -135,7 +135,7 @@ WRESULT RecollProtocol::mimetype(const QUrl& url)
 {
     qDebug() << "RecollProtocol::mimetype: url: " << url;
     mimeType("text/html");
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
     finished();
 #else
     return KIO::WorkerResult::pass();
@@ -232,8 +232,8 @@ bool RecollProtocol::syncSearch(const QueryDesc& qd)
     qDebug() << "RecollProtocol::syncSearch";
     if (!m_initok || !maybeOpenDb(m_reason)) {
         string reason = "RecollProtocol::listDir: Init error:" + m_reason;
-#if KIO_VERSION < 6
-        error(KIO::ERR_WORKER_DEFINED, u8s2qs(reason));
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
+        error(ERR_SLAVE_DEFINED, u8s2qs(reason));
 #endif
         return false;
     }
@@ -253,11 +253,11 @@ WRESULT RecollProtocol::get(const QUrl& url)
 
     if (!m_initok || !maybeOpenDb(m_reason)) {
         string reason = "Recoll: init error: " + m_reason;
-#if KIO_VERSION < 6
-        error(KIO::ERR_WORKER_DEFINED, u8s2qs(reason));
-        return;
-#else
+#if KIO_VERSION >= KIO_WORKER_SWITCH_VERSION
         return KIO::WorkerResult::fail();
+#else
+        error(ERR_SLAVE_DEFINED, u8s2qs(reason));
+        return;
 #endif
     }
 
@@ -289,7 +289,7 @@ WRESULT RecollProtocol::get(const QUrl& url)
         //
         // Redirect to the result document URL
         if (!syncSearch(qd)) {
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
             return;
 #else
             return KIO::WorkerResult::fail();
@@ -303,7 +303,7 @@ WRESULT RecollProtocol::get(const QUrl& url)
         }
     } else if (ingest.isPreview(&qd, &resnum)) {
         if (!syncSearch(qd)) {
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
             return;
 #else
             return KIO::WorkerResult::fail();
@@ -320,13 +320,13 @@ WRESULT RecollProtocol::get(const QUrl& url)
         goto out;
     }
 
-#if KIO_VERSION < 6
-    error(KIO::ERR_WORKER_DEFINED, u8s2qs("Unrecognized URL or internal error"));
-#else
+#if KIO_VERSION >= KIO_WORKER_SWITCH_VERSION
     return KIO::WorkerResult::fail();
+#else
+    error(ERR_SLAVE_DEFINED, u8s2qs("Unrecognized URL or internal error"));
 #endif
 out:
-#if KIO_VERSION < 6
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
     finished();
 #else
     return KIO::WorkerResult::pass();
@@ -358,8 +358,8 @@ bool RecollProtocol::doSearch(const QueryDesc& qd)
     }
     if (!sdata) {
         m_reason = "Internal Error: cant build search";
-#if KIO_VERSION < 6
-        error(KIO::ERR_WORKER_DEFINED, u8s2qs(m_reason));
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
+        error(ERR_SLAVE_DEFINED, u8s2qs(m_reason));
 #endif
         return false;
     }
@@ -370,8 +370,8 @@ bool RecollProtocol::doSearch(const QueryDesc& qd)
     query->setCollapseDuplicates(collapsedups);
     if (!query->setQuery(sdata)) {
         m_reason = "Query execute failed. Invalid query or syntax error?";
-#if KIO_VERSION < 6
-        error(KIO::ERR_WORKER_DEFINED, u8s2qs(m_reason));
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
+        error(ERR_SLAVE_DEFINED, u8s2qs(m_reason));
 #endif
         return false;
     }
@@ -379,8 +379,8 @@ bool RecollProtocol::doSearch(const QueryDesc& qd)
     DocSequenceDb *src =
         new DocSequenceDb(m_rcldb, std::shared_ptr<Rcl::Query>(query), "Query results", sdata);
     if (src == nullptr) {
-#if KIO_VERSION < 6
-        error(KIO::ERR_WORKER_DEFINED, u8s2qs("Can't build result sequence"));
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
+        error(ERR_SLAVE_DEFINED, u8s2qs("Can't build result sequence"));
 #endif
         return false;
     }
diff --git a/kde/kioslave/kio_recoll/kio_recoll.h b/kde/kioslave/kio_recoll/kio_recoll.h
index 2feff373..7e824c78 100644
--- a/kde/kioslave/kio_recoll/kio_recoll.h
+++ b/kde/kioslave/kio_recoll/kio_recoll.h
@@ -24,7 +24,9 @@
 #include <QUrl>
 
 #include <kio_version.h>
-#if KIO_VERSION < 6
+// Apparently this nonsense happened in 5.102 (0x66). 
+#define KIO_WORKER_SWITCH_VERSION 0x056600
+#if KIO_VERSION < KIO_WORKER_SWITCH_VERSION
 #include <kio/slavebase.h>
 #define WBASE SlaveBase
 #define WRESULT void
